name: Wine MSYS2 Docker

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Download wine-msys2 artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: wine-msys2.yml
          workflow_conclusion: success
          branch: master-msys2
          path: /opt

      - name: Build Docker Image
        run: |
          echo _ ls -alh
          ls -alh
          # 
          echo _ pwd
          pwd
          #
          sudo apt update
          sudo apt install debootstrap perl git wget xz-utils bubblewrap autoconf
          #
          WD=$(pwd)
          #
          echo _ cd /opt
          cd /opt
          #
          echo _ ls -alh /opt
          ls -alh /opt
          #
          echo _ tree -L 2
          tree -L 2
          #
          echo cd
          cd "Wine Stable"
          #
          echo _ ls -alh
          ls -alh
          #
          echo _ sudo tar -xpf wine-*-custom-x86.tar.xz
          sudo tar -xpf wine-*-custom-x86.tar.xz
          #
          echo _ sudo tar -xpf wine-*-custom-amd64.tar.xz
          sudo tar -xpf wine-*-custom-amd64.tar.xz
          #
          echo _ ls -alh
          ls -alh
          # 
          echo _ tree -L 2
          tree -L 2
          #
          echo _ ls -alh $WD/Docker
          ls -alh $WD/Docker
          #
          echo _ $WD/Docker/wine 
          mkdir -p $WD/Docker/wine
          #
          echo _ cp -a wine-9.0-rc1-custom-x86 $WD/Docker/wine
          cp -a wine-9.0-rc1-custom-x86 $WD/Docker/wine
          #
          echo _ cp -a wine-9.0-rc1-custom-amd64 $WD/Docker/wine
          cp -a wine-9.0-rc1-custom-amd64 $WD/Docker/wine
          #
          echo \# find $WD/Docker/wine -name '*wine*'
          find $WD/Docker/wine -name '*wine*'
          #
          file $(which ls)
          file $(which ping) 
          file $(which cat)
          #
          # TODO: This prints 32bit for our amd64 build. That is weird, and Docker probably can't run this. (Works for now, as some weird workarounds are done.)
          echo \# file $WD/Docker/wine/wine-9.0-rc1-custom-.../bin/wine
          file $WD/Docker/wine/wine-9.0-rc1-custom-*/bin/wine
          #
          echo \# $WD/Docker/wine/wine-9.0-rc1-custom-amd64/bin/wine --help
          $WD/Docker/wine/wine-9.0-rc1-custom-amd64/bin/wine --help
          #
          echo \# $WD/Docker/wine/wine-9.0-rc1-custom-x86/bin/wine --help
          $WD/Docker/wine/wine-9.0-rc1-custom-x86/bin/wine --help
          #
          echo _ cd $WD/Docker
          cd $WD/Docker
          #
          echo _ ls -alh
          ls -alh
          #
          echo docker build -t wine .
          docker build -t wine .

      - name: Test if Wine works in the docker image
        run: |
          #echo docker run wine ls -al /opt
          #docker run wine ls -al /opt
          #
          echo \# docker run wine find /opt/wine -iname '*.exe'
          docker run wine find /opt/wine -iname '*.exe'
          #
          #echo \# docker run wine find /opt/wine -iname '*wine*'
          #docker run wine find /opt/wine -iname '*wine*'
          #
          #echo \# docker run wine ls -alh /opt/wine/wine-9.0-rc1-custom-amd64/bin/
          #docker run wine ls -alh /opt/wine/wine-9.0-rc1-custom-amd64/bin/
          #
          echo \# file /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine
          docker run wine file /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine
          #
          echo \# docker run wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine --version
          docker run wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine --version
          #
          echo \# docker run wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /opt/wine/wine-9.0-rc1-custom-amd64/lib/wine/x86_64-windows/whoami.exe
          docker run wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /opt/wine/wine-9.0-rc1-custom-amd64/lib/wine/x86_64-windows/whoami.exe

      - name: Test if MSYS2 can be run in the docker image
        run: |
          wget --quiet https://github.com/msys2/msys2-installer/releases/download/2023-10-26/msys2-base-x86_64-20231026.tar.xz
          tar --extract --file msys2-base-x86_64-20231026.tar.xz
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine --help
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "echo PWD: $PWD"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "pacman --version"

      - name: Test if pacman works on MSYS2
        run: |
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "pacman --sync --needed --noconfirm bc"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "echo 1+2 | bc "

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push docker image to Docker Hub
        run: |
          docker tag wine debuglevel/wine-msys2:latest
          docker push debuglevel/wine-msys2:latest

      - name: Install borg/borgmatic dependencies on MSYS2
        run: |
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "pacman --sync --needed --noconfirm python python-pip"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "pacman --sync --needed --noconfirm git base-devel gcc openssl-devel pkgconf"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "pacman --sync --needed --noconfirm openssh ssh-pageant"
          #
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "which python"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "which python3"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "python --version"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "python3 --version"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "which pip"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "which pip3"
          #
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "python -m pip install --upgrade pip setuptools wheel"
      - name: Install borgmatic on MSYS2
        run: |
          # docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "SETUPTOOLS_USE_DISTUTILS=stdlib pip install borgmatic==1.8.6"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "SETUPTOOLS_USE_DISTUTILS=stdlib pip install 'borgmatic @ git+https://github.com/debuglevel/borgmatic@edd2cceceeeb3984a9d39f41e7cfc6fb6495a21f'"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "borgmatic --version"
      - name: Install borg on MSYS2
        run: |
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "pip install borgbackup==1.2.7"
          docker run -e WINEDEBUG=-all -v $PWD/msys64:/mnt/ wine /opt/wine/wine-9.0-rc1-custom-amd64/bin/wine /mnt/usr/bin/bash.exe -l -c "borg --version"          

      - name: Compress (zstd,5) and upload (to keep.sh) MSYS2+borgmatic
        run: |
          export ZSTD_CLEVEL=5
          export ZSTD_NBTHREADS=4
          tar --create --zstd --file msys2-with-borgmatic.tar.zstd msys64
          ls -alh msys2-with-borgmatic.tar.zstd
          curl --upload-file msys2-with-borgmatic.tar.zstd https://free.keep.sh
